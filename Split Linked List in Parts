// https://leetcode.com/problems/split-linked-list-in-parts/

class Solution {
public:
	vector<ListNode*> splitListToParts(ListNode* root, int k) {

		vector<ListNode*> result;
		int count = 0;
		for (ListNode* r = root; r; r = r->next) {

			count++;
		}
		int d = count % k;
		int m = count / k;

		for (int i = 0; i < d; i++) {
			ListNode* res = new ListNode(root->val);
			ListNode* resf = res;
			for (int k = 0; k < m + 1; k++) {
				ListNode* next;
				next = new ListNode(root->val);
				res->next = next;
				res = next;
				root = root->next;
			}

			result.push_back(resf->next);

		}

		for (int i = 0; i < k - d; i++) {
			if (root == NULL) {
				result.push_back(NULL);
			}
			else {
				ListNode* res = new ListNode(root->val);
				ListNode* resf = res;
					for (int k = 0; k < m; k++) {
						ListNode* next;
						next = new ListNode(root->val);
						res->next = next;
						res = next;
						root = root->next;
					}

					result.push_back(resf->next);
				
			}
		}
		return result;

	}
};
